#include "core_api.h"
#include "sim_api.h"
#include <stdio.h>
#include <iostream>
#include <sstream>
#include <math.h>
#include <stdlib.h>
#include <cstdlib>
using namespace std;

#define IDLE -1
#define AllThreadHalted -2
#define FgFirstThread 0

#define INSTRUCTION_STEP 1

// thread initialization 
typedef struct thread_data{
    tcontext register_thread;
    uint32_t pc; // init to zero always ?
    bool halted;// if halted=1 we finish to brings instructions to this thread
    int busy;//if busy isnt 0 we pass this thread

    thread_data() : halted(false), busy(0), pc(0), register_thread() {}
}therad_data;

//program initialization by parameters
typedef struct program_init{
    int thread_on_working;
    int num_of_cycles;
    int num_of_instructions;
    int penalty_switch_cycles;
    int Load_latency;
    int Store_latency;
    therad_data *threads;
    int threads_in_halted;
    int valid;

    program_init() : thread_on_working(0), num_of_cycles(0), num_of_instructions(0), penalty_switch_cycles(0), threads_in_halted(0), valid(0), 
                     Load_latency(SIM_GetLoadLat()), Store_latency(SIM_GetStoreLat()) {
        threads = new thread_data[SIM_GetThreadsNum()]();
    }
}program_init;

//initialization data structure of MT and Fine_grained
program_init* FineGrained = new program_init();
program_init* blockdMT = new program_init();
int num_of_threads = SIM_GetThreadsNum();

///////////////////////BLOCKD_MT://///////////////////////////////////////////////////////////////////////////////////////////////////////

void run_cmd(int tid, bool is_fine);

//get the thread that available 
int get_thread_MT(){
    int threads_that_halted=0;
    int threads_that_busy=0;
    int current_thread=blockdMT->thread_on_working;

    while(threads_that_halted<=num_of_threads){
        if(blockdMT->threads[current_thread].halted==1){ // skip to next one
             threads_that_halted++;
             current_thread++;
             current_thread = current_thread % num_of_threads;
             continue;
        }
        if(blockdMT->threads[current_thread].busy==0){ // stay in same thread
            return current_thread;
        }
        threads_that_busy++;//if we are here,our thread is busy -> skip to next one
        current_thread++;
        current_thread=current_thread%num_of_threads;
        if (threads_that_busy==num_of_threads){//if all the threads are busy-its halted!
            return IDLE;
        }
    }
    return AllThreadHalted;
}

//blocked MT start to run here!
void threads_blockedMT_run(){
    while(1){//each iteration in a loop = clock cycle
        int thread=get_thread_MT();//tell you if current we are in: 1)IDlE 2)stay with same thread 3)finish(all halted) 4)replacement thread
        if (thread==IDLE){//first case
            blockdMT->num_of_cycles++;
            for (int i=0;i<num_of_threads;i++){
                if(blockdMT->threads[i].busy){
                    blockdMT->threads[i].busy--;
                }
            }
            continue;
        }
        else if(thread==blockdMT->thread_on_working){//second case
            blockdMT->num_of_cycles++;
            run_cmd(thread, false);
            continue;
        }
        else if(thread>=0){//fourth case-switch thread!
            blockdMT->thread_on_working=thread;
            for(int i=0;i<blockdMT->penalty_switch_cycles;i++){
                blockdMT->num_of_cycles++;
                for (int j=0;j<num_of_threads;j++){
                    if(blockdMT->threads[j].busy){
                        blockdMT->threads[j].busy--;
                    }
                }
            }
            run_cmd(thread, false);
        }        
        else if (thread==AllThreadHalted){//third case
            break;
        }
    }
}



//////////////////Fine_Grained_MT/////////////////////////////////////////////////////////////////////////////

//get the thread that available 
int get_thread_FG(){
    int threads_that_halted=0;
    int threads_that_busy=0;
    if (!FineGrained->valid){//we just start the run,so we need to choose the first thread(thread that equal to 0)
        FineGrained->valid=1;
        return FgFirstThread;
    }
    int current_thread=(FineGrained->thread_on_working)+1;
    while(threads_that_halted<=num_of_threads){
        if(FineGrained->threads[current_thread].halted==1){
             threads_that_halted++;
             current_thread++;
             current_thread=current_thread%num_of_threads;
             continue;
        }
        if(FineGrained->threads[current_thread].busy==0){//thread that available
            return current_thread;
        }
        threads_that_busy++;//if we are here,current_thread is busy
        current_thread++;
        current_thread=current_thread%num_of_threads;
        if (threads_that_busy==num_of_threads){//if all the threads are busy-its halted!
            return IDLE;
        }
    }
    return AllThreadHalted;
}

//FG start to run here!
void FineGrained_run(){
    while(1){//each iteration in a loop = clock cycle
        int thread=get_thread_FG();//tell you if current we are in: 1)IDlE 2)replacement thread 3)finish(all halted) 
        if (thread==IDLE){//first case
            FineGrained->num_of_cycles++;
            for (int i=0;i<num_of_threads;i++){
                if(FineGrained->threads[i].busy){
                    FineGrained->threads[i].busy--;
                }
            }
            continue;
        }
        if(thread>=0){//second case
            FineGrained->num_of_cycles++;
            run_cmd(thread, true);
            continue;
        }
        if (thread==AllThreadHalted){//third case
            break;
        }
    }
}



    
    

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// -- Run Command --

void run_cmd(int tid, bool is_fine) {
    program_init *program = is_fine ? FineGrained : blockdMT;
    thread_data  *th = &(program->threads[tid]);
    int *regs = th->register_thread.reg;
    int &busy = th->busy;

    Instruction cmd;
    int val1, val2; // imm or reg[src2]

    // fetch & decode
    SIM_MemInstRead(th->pc, &cmd, tid);
    th->pc += INSTRUCTION_STEP;

    if (cmd.opcode == CMD_SUBI || cmd.opcode == CMD_ADDI)
        cmd.isSrc2Imm = true; // Ensure input is as expected
    
    // rest of pipe 
    val2 = (cmd.opcode || cmd.isSrc2Imm) ? cmd.src2_index_imm : regs[cmd.src2_index_imm];  // opcode check to secure regs[] acccess
    val1 =  cmd.opcode ? regs[cmd.src1_index] : 0;

    switch(cmd.opcode) {
        case CMD_NOP: 
            break;
        case CMD_SUBI:
        case CMD_SUB:
            val2 = -val2;
        case CMD_ADDI:
        case CMD_ADD:
            regs[cmd.dst_index] = val1 + val2;
            break;
        case CMD_LOAD:
            SIM_MemDataRead(val1 + val2, regs + cmd.dst_index); 
            busy = program->Load_latency;
            break;
        case CMD_STORE:
            SIM_MemDataWrite(regs[cmd.dst_index] + val2, val1);
            busy = program->Store_latency;
            break;
        case CMD_HALT:
            th->halted = true;
            break;
    }

    program->num_of_instructions++;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////

// assume sim_memreset before
void CORE_BlockedMT() {
    blockdMT->penalty_switch_cycles=SIM_GetSwitchCycles();//in blocked_MT we insert the value from configuration system
    threads_blockedMT_run();  
}

void CORE_FinegrainedMT() {
    FineGrained_run();
}

double CORE_BlockedMT_CPI(){
	return blockdMT->num_of_cycles / blockdMT->num_of_instructions; // TODO: check penalty is taken into account correctly
}

double CORE_FinegrainedMT_CPI(){
	return FineGrained->num_of_cycles / FineGrained->num_of_instructions; 
}

void CORE_BlockedMT_CTX(tcontext* context, int threadid) {
    context[0] = blockdMT->threads[threadid].register_thread;
}

void CORE_FinegrainedMT_CTX(tcontext* context, int threadid) {
    context[0] = FineGrained->threads[threadid].register_thread;
}

