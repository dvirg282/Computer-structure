
#include "core_api.h"
#include "sim_api.h"
#include <stdio.h>
#include <iostream>
#include <sstream>
#include <math.h>
#include <stdlib.h>
#include <cstdlib>
using namespace std

#define IDLE -1
#define AllThreadHalted -2
#define FgFirstThread 0

// thread initialization 
typedef struct thread{
    tcontext register_thread;
    bool halted=0;// if halted=1 we finish to brings instructions to this thread
    int busy=0;//if busy isnt 0 we pass this thread
}therad_data;

//program initialization by parameters
typedef struct program_init{
    int thread_on_working=0;
    int num_of_cycles=0;
    int penalty_switch_cycles=0;
    int Load_latency=SIM_GetLoadLat();
    int Store_latency=SIM_GetStoreLat();
    therad_data threads[SIM_GetThreadsNum()];
    int threads_in_halted=0;
    int valid=0;
}program_init;

//initialization data structure of MT and Fine_grained
program_init* FineGrained= new program_init();
program_init* blockdMT= new program_init();
int num_of_threads=SIM_GetThreadsNum();

//initialization the regs in tcontext to zero;
void initialization_tcontext_to_Zero(program_init* curr_prog){
    for (int i=0;i<num_of_threads;i++){
        for(int j=0;j<REGS_COUNT;j++){
            curr_prog->threads[i].register_thread.reg[j]=0;
        }
    }
}

///////////////////////BLOCKD_MT://///////////////////////////////////////////////////////////////////////////////////////////////////////


//blocked MT start to run here!
void threads_blockedMT_run(){
    while(1){//each iteration in a loop = clock cycle
        int thread=get_thread_MT();//tell you if current we are in: 1)IDlE 2)stay with same thread 3)finish(all halted) 4)replacement thread
        if (thread==IDLE){//first case
            blockdMT->num_of_cycles++;
            for (int i=0;i<num_of_threads;i++){
                if(blockdMT->threads[i].busy){
                    blockdMT->threads[i].busy--;
                }
            }
            continue;
        }
        if(thread==blockdMT->thread_on_working){//second case
            blockdMT->num_of_cycles++;
            curr_instruction(){
                //to do-function that get the next instruction 
            continue;
            }
        }
        if(thread>=0){//fourth case-switch thread!
            blockdMT->thread_on_working=thread;
            for(int i=0;i<blockdMT->penalty_switch_cycles;i++){
                blockdMT->num_of_cycles++;
                for (int j=0;j<num_of_threads;j++){
                    if(blockdMT->threads[j].busy){
                        blockdMT->threads[j].busy--;
                    }
                }
            }
            curr_instruction();
        }        
        if (thread==AllThreadHalted){//third case
            break;
        }
    }
}

//get the thread that available 
int get_thread_MT(){
    int threads_that_halted=0;
    int threads_that_busy=0;
    int current_thread=blockdMT->thread_on_working;
    while(thread_that_halted<=num_of_threads){
        if(blockdMT->threads[current_thread].halted==1){
             threads_that_halted++;
             current_thread++;
             current_thread=current_thread%num_of_threads;
             continue;
        }
        if(blockdMT->threads[current_thread].busy==0){
            return current_thread;
        }
        threads_that_busy++;//if we are here,our thread is busy
        current_thread++;
        current_thread=current_thread%num_of_threads;
        if (threads_that_busy==num_of_threads){//if all the threads are busy-its halted!
            return IDLE;
        }
    }
    return AllThreadHalted;
}


//////////////////Fine_Grained_MT/////////////////////////////////////////////////////////////////////////////


//FG start to run here!
void CORE_FinegrainedMT(){
    while(1){//each iteration in a loop = clock cycle
        int thread=get_thread_FG();//tell you if current we are in: 1)IDlE 2)replacement thread 3)finish(all halted) 
        if (thread==IDLE){//first case
            FineGrained->num_of_cycles++;
            for (int i=0;i<num_of_threads;i++){
                if(FineGrained->threads[i].busy){
                    FineGrained->threads[i].busy--;
                }
            }
            continue;
        }
        if(thread>=0){//second case
            FineGrained->num_of_cycles++;
            curr_instruction(){
                //to do-function that get the next instruction 
            continue;
            }
        }
        if (thread==All_thread_halted){//third case
            break;
        }
    }
}



//get the thread that available 
int get_thread_FG(){
    int threads_that_halted=0;
    int threads_that_busy=0;
    if (!FineGrained->valid){//we just start the run,so we need to choose the first thread(thread that equal to 0)
        FineGrained->valid=1;
        return FgFirstThread;
    }
    int current_thread=(FineGrained->thread_on_working)+1;
    while(thread_that_halted<=num_of_threads){
        if(FineGrained->threads[current_thread].halted==1){
             threads_that_halted++;
             current_thread++;
             current_thread=current_thread%num_of_threads;
             continue;
        }
        if(FineGrained->threads[current_thread].busy==0){//thread that available
            return current_thread;
        }
        threads_that_busy++;//if we are here,current_thread is busy
        current_thread++;
        current_thread=current_thread%num_of_threads;
        if (threads_that_busy==num_of_threads){//if all the threads are busy-its halted!
            return IDLE;
        }
    }
    return AllThreadHalted;
}    
    
    


//////////////////////////////////////////////////////////////////////////////////////////////////////////

void CORE_BlockedMT() {
  initialization_tcontext_to_Zero(blockdMT); 
  blockdMT->penalty_switch_cycles=SIM_GetSwitchCycles();//in blocked_MT we insert the value from configuration system
  threads_blockedMT_run();  
}

void CORE_FinegrainedMT() {
    initialization_tcontext_to_Zero(FineGrained); 
    FineGrained_run();
}

double CORE_BlockedMT_CPI(){
	return 0;
}

double CORE_FinegrainedMT_CPI(){
	return 0;
}

void CORE_BlockedMT_CTX(tcontext* context, int threadid) {
}

void CORE_FinegrainedMT_CTX(tcontext* context, int threadid) {
}
